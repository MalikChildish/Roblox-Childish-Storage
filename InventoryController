-- InventoryController.lua
-- Malik Allen LLC, Roblox Studio Pro GPT

local Player = game.Players.LocalPlayer

local MasterFolder = game.ReplicatedStorage.InventorySystem
local InventorySlots = script.Parent.InventorySlots
local NextArrow = script.Parent.NextArrow
local PreviousArrow = script.Parent.PreviousArrow
local PageIndicator = script.Parent.PageIndicator
local SpaceCount = script.Parent.SpaceCount

local ToolBar = script.Parent.Parent.Parent:WaitForChild("ToolBar"):WaitForChild("ToolBarHolder")
local ToolBarSlots = ToolBar.Slots
local ToolBarSelectionStroke = ToolBar.SelectionStroke

local EquipmentPanel = script.Parent.EquipmentPanel
local EquipmentSlots = EquipmentPanel.Slots

local InfoPanel = script.Parent.InfoPanel
local InfoToolBarButtons = InfoPanel.ToolBarButtons
local InfoDropButton = InfoPanel.DropButton
local InfoEquipButton = InfoPanel.EquipButton
local InfoDescription = InfoPanel.Description
local InfoItemName = InfoPanel.ItemName

-- Modules
local ItemDB = require(MasterFolder.Modules.ItemData)

-- Events
local Events = MasterFolder.Events
local UpdateUIEvent = Events.ServerClient.UpdateUI
local LoadPlayerDataEvent = game.ReplicatedStorage.PlayerDataSystem.Events.ServerClient.LoadData
local DropItemsEvent = Events.ClientServer.DropItem
local EquipItemEvent = Events.ClientServer.EquipItem
local UnequipItemEvent = Events.ClientServer.UnequipItem
local SelectToolBarEvent = Events.ClientServer.SelectToolBarSlot
local AddToToolBarEvent = Events.ClientServer.AddToToolBar
local UnequipToolBarEvent = Events.ClientServer.UnequipToolBar

-- Static
local SlotCount = 9

-- Tracking
local CurrentInventoryItems = {}
local CurrentPages = {}
local CurrentSelectedPage = 1
local CurrentSelectedItem = nil
local CurrentSelectedToolBarSlot = 1

function GetPages(Items)
	local Pages = {}
	local CurrentPage = 1
	for i, Item in ipairs(Items) do
		if not Pages[CurrentPage] then Pages[CurrentPage] = {} end

		if #Pages[CurrentPage] < SlotCount then
			table.insert(Pages[CurrentPage], Item)
		end

		if #Pages[CurrentPage] >= SlotCount then
			CurrentPage += 1
		end
	end

	return Pages
end

function UpdateSpaceCount()
	local PlayerBagSpace = Player:GetAttribute("BagSpace") or 0
	SpaceCount.Text = string.format("%d / %d", #CurrentInventoryItems, PlayerBagSpace)
end

Player:GetAttributeChangedSignal("BagSpace"):Connect(UpdateSpaceCount)

function SelectPage(PageNumber)
	local Page = CurrentPages[PageNumber] or {}

	for i, Item in ipairs(InventorySlots:GetChildren()) do
		Item:SetAttribute("CurrentItem", nil)
		Item.Image = ""
		Item.ImageColor3 = Color3.new(1, 1, 1)

		local PageItem = Page[i]
		if not PageItem then continue end

		local ItemInfo = ItemDB.Items[PageItem]
		if not ItemInfo then continue end

		Item:SetAttribute("CurrentItem", PageItem)
		Item.Image = ItemInfo["Image"]
	end
	CurrentSelectedPage = PageNumber
	PageIndicator.Text = string.format("Page %d of %d", PageNumber, #CurrentPages)
end

function MoveToPage(ByValue)
	local TargetNumber = CurrentSelectedPage + ByValue
	if CurrentPages[TargetNumber] then
		SelectPage(TargetNumber)
		UpdateInfoPanel(CurrentSelectedItem)
	end
end

function UpdateItems(Items)
	CurrentInventoryItems = Items
	CurrentPages = GetPages(Items)
	SelectPage(1)
	UpdateSpaceCount()
	UpdateInfoPanel(CurrentSelectedItem)
end

function UpdateInfoPanel(Item)
	if CurrentSelectedItem then
		CurrentSelectedItem.ImageColor3 = Color3.new(1, 1, 1)
	end

	CurrentSelectedItem = Item

	if CurrentSelectedItem then
		CurrentSelectedItem.ImageColor3 = Color3.new(1, 0, 0.0156863)
	end

	local ItemName = (CurrentSelectedItem and CurrentSelectedItem:GetAttribute("CurrentItem")) or nil

	if not ItemName then
		InfoPanel.Visible = false
		return
	end

	InfoPanel.Visible = true
	local ItemInfo = ItemDB.Items[ItemName]

	for _, ToolBarButton in ipairs(InfoToolBarButtons:GetChildren()) do
		ToolBarButton.Visible = (ItemInfo["Type"] == "Tool")
	end

	InfoDropButton.Visible = (ItemInfo["IsDropable"] == true)
	InfoEquipButton.Visible = (ItemInfo["Type"] == "Wearable") or (ItemInfo["Type"] == "Food") or (ItemInfo["Type"] == "Drink")
	InfoEquipButton.Text = ItemDB.TypeInfo[ItemInfo["Type"]].ActionText

	InfoDescription.Text = string.format("%s", ItemInfo["Description"])

	if ItemInfo["Type"] == "Wearable" then
		InfoDescription.Text = string.format("<i>%s</i> <b> <br /> <font color='rgb(255,0,0)'> Health : %d</font> <br /> <font color='rgb(0,0,255)'> Speed : %d</font></b>", ItemInfo["Description"], ItemInfo["Health"], ItemInfo["Speed"])
	elseif ItemInfo["Type"] == "Tool" then
		InfoDescription.Text = string.format("<i>%s</i> <b> <br /> <font color='rgb(255,0,0)'> Damage : %d</font></b>", ItemInfo["Description"], ItemInfo["Damage"])
	elseif ItemInfo["Type"] == "Food" then
		InfoDescription.Text = string.format("<i>%s</i> <b> <br /> <font color='rgb(255,0,0)'>  +%d Health</font></b>", ItemInfo["Description"], ItemInfo["HealthAmount"])
	elseif ItemInfo["Type"] == "Drink" then
		InfoDescription.Text = string.format("<i>%s</i> <b> <br /> <font color='rgb(255,0,0)'> +%d Speed</font> <br /> Duration: %d seconds</b>", ItemInfo["Description"], ItemInfo["SpeedBoost"], ItemInfo["EffectDuration"])
	end

	InfoItemName.Text = ItemName
end

function SelectItem(Item)
	if CurrentSelectedItem == Item then return end
	UpdateInfoPanel(Item)
end

for _, Item in ipairs(InventorySlots:GetChildren()) do
	Item.MouseButton1Click:Connect(function()
		SelectItem(Item)
	end)
end

NextArrow.MouseButton1Click:Connect(function() MoveToPage(1) end)
PreviousArrow.MouseButton1Click:Connect(function() MoveToPage(-1) end)

InfoDropButton.MouseButton1Click:Connect(function()
	if not CurrentSelectedItem or not CurrentSelectedItem:GetAttribute("CurrentItem") then return end
	DropItemsEvent:FireServer(CurrentSelectedItem:GetAttribute("CurrentItem"), 1)
	SelectItem(CurrentSelectedItem)
end)

InfoEquipButton.MouseButton1Click:Connect(function()
	if not CurrentSelectedItem or not CurrentSelectedItem:GetAttribute("CurrentItem") then return end
	EquipItemEvent:FireServer(CurrentSelectedItem:GetAttribute("CurrentItem"))
	SelectItem(CurrentSelectedItem)
end)

function UpdateEquipmentSlot(SlotObject)
	local ItemName = Player:GetAttribute(string.format("%sItem", SlotObject.Name))

	SlotObject.Image = ""

	if not SlotObject then return end
	local ItemInfo = ItemDB.Items[ItemName]
	if not ItemInfo then return end

	SlotObject.Image = ItemInfo["Image"]
end

function UpdateEquipment()
	local Slots = EquipmentSlots:GetChildren()
	for _, SlotObject in ipairs(Slots) do
		Player:GetAttributeChangedSignal(string.format("%sItem", SlotObject.Name)):Connect(function()
			UpdateEquipmentSlot(SlotObject)
		end)
		UpdateEquipmentSlot(SlotObject)
		SlotObject.MouseButton1Click:Connect(function()
			UnequipItemEvent:FireServer(SlotObject.Name)
		end)
	end
end

function ToolBarSelect(Ind)
	ToolBarSelectionStroke.Parent = ToolBarSlots[Ind]
end

function ToolBarUpdate(ToolBarSlot)
	ToolBarSlot.Image = ""

	local ItemName = Player:GetAttribute(string.format("ToolBar%s", ToolBarSlot.Name))

	if not ItemName or ItemName == "" then return end

	local ItemInfo = ItemDB.Items[ItemName]
	if not ItemInfo then return end

	ToolBarSlot.Image = ItemInfo["Image"]
end

function SetupToolBar()
	Player:GetAttributeChangedSignal("SelectedToolBarSlot"):Connect(function()
		local Current = Player:GetAttribute("SelectedToolBarSlot")
		ToolBarSelect(Current)
	end)

	for _, ToolBarSlot in ipairs(ToolBarSlots:GetChildren()) do
		Player:GetAttributeChangedSignal(string.format("ToolBar%s", ToolBarSlot.Name)):Connect(function()
			ToolBarUpdate(ToolBarSlot)
		end)
		ToolBarSlot.MouseButton1Click:Connect(function()
			if script.Parent.Visible then -- Check if inventory is open
				UnequipFromToolBar(ToolBarSlot.Name)
			else
				SelectToolBarEvent:FireServer(ToolBarSlot.Name)
			end
		end)
	end
end

function UnequipFromToolBar(slotName)
	local currentItem = Player:GetAttribute("ToolBar" .. slotName)
	if currentItem and currentItem ~= "" then
		UnequipToolBarEvent:FireServer(slotName)
	end
end

function SetUpAddToToolBar()
	for _, Button in ipairs(InfoToolBarButtons:GetChildren()) do
		Button.MouseButton1Click:Connect(function()
			AddToToolBarEvent:FireServer(CurrentSelectedItem:GetAttribute("CurrentItem") or nil, Button.Name)
		end)
	end
end
SetUpAddToToolBar()

LoadPlayerDataEvent.OnClientEvent:Connect(function(Data)
	UpdateItems(Data["Inventory"])
	UpdateEquipment()
	SetupToolBar()

	for i = 1, SlotCount do
		local ToolBarSlot = ToolBarSlots:FindFirstChild(tostring(i))
		if ToolBarSlot then
			ToolBarSlot:SetAttribute("CurrentItem", Player:GetAttribute(string.format("ToolBar%d", i)))
			ToolBarUpdate(ToolBarSlot)
		end
		ToolBarSelect(Data["SelectedToolBarSlot"])
	end
end)

UpdateUIEvent.OnClientEvent:Connect(function(Inventory)
	UpdateItems(Inventory)
end)
